import os
import json
import random
import time
import logging
import shutil
import asyncio
from typing import Dict, List, Optional

from gtts import gTTS
from pydub import AudioSegment

# –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å Microsoft Edge TTS (–æ–Ω–ª–∞–π–Ω, —Ä–∞–∑–Ω—ã–µ –≥–æ–ª–æ—Å–∞)
try:
    import edge_tts  # pip install edge-tts
    EDGE_TTS_AVAILABLE = True
except Exception:  # ImportError –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    edge_tts = None
    EDGE_TTS_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—É—Ç–∏
DATASET_DIR = "result/dataset"
OUTPUT_DIR = os.path.join(DATASET_DIR, "audio")
MANIFEST_FILE = os.path.join(DATASET_DIR, "manifest.csv")
WORDS_JSON = "words.json"  # JSON: {"–∏–Ω—Ñ–∏–Ω–∏—Ç–∏–≤": ["–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ1", "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ2", ...]}


def ensure_dirs() -> None:
    os.makedirs(OUTPUT_DIR, exist_ok=True)


def clean_dataset() -> None:
    # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ dataset
    if os.path.exists(DATASET_DIR):
        shutil.rmtree(DATASET_DIR, ignore_errors=True)
    ensure_dirs()


# –ü—Ä–æ—Ñ–∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤
# gTTS ‚Äî –æ–¥–∏–Ω —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å, –Ω–æ –º—ã —Ä–∞–∑–ª–∏—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ —á–µ—Ä–µ–∑ —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏
VOICE_PROFILES = [
    {"name": "gtts_fast", "engine": "gtts", "params": {"slow": False}},
    {"name": "gtts_slow", "engine": "gtts", "params": {"slow": True}},
]

# –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω edge-tts, –¥–æ–±–∞–≤–∏–º –Ω–∞—Å—Ç–æ—è—â–∏–µ —Ä–∞–∑–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞
if EDGE_TTS_AVAILABLE:
    VOICE_PROFILES.extend([
        {"name": "ms_dmitry", "engine": "edge_tts", "params": {"voice": "ru-RU-DmitryNeural"}},
        {"name": "ms_svetlana", "engine": "edge_tts", "params": {"voice": "ru-RU-SvetlanaNeural"}},
    ])


# –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ gTTS –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ .wav (16kHz mono)
def tts_gtts(text: str, filename_no_ext: str, slow: bool = False) -> Optional[str]:
    try:
        tts = gTTS(text=text, lang='ru', slow=slow)
        temp_mp3 = f"{filename_no_ext}.mp3"
        tts.save(temp_mp3)

        audio = AudioSegment.from_mp3(temp_mp3)
        audio = audio.set_frame_rate(16000).set_channels(1)
        wav_filename = f"{filename_no_ext}.wav"
        audio.export(wav_filename, format="wav")

        os.remove(temp_mp3)
        logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {wav_filename}")
        return wav_filename
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ gTTS –ø—Ä–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–∏ '{text}': {e}")
        return None


async def _tts_edge_async(text: str, mp3_path: str, voice: str) -> None:
    communicate = edge_tts.Communicate(text=text, voice=voice)
    await communicate.save(mp3_path)


def tts_edge(text: str, filename_no_ext: str, voice: str) -> Optional[str]:
    if not EDGE_TTS_AVAILABLE:
        logger.warning("edge-tts –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–∞–¥–µ–Ω–∏–µ –Ω–∞ gTTS")
        return tts_gtts(text, filename_no_ext, slow=False)
    try:
        temp_mp3 = f"{filename_no_ext}.mp3"
        asyncio.run(_tts_edge_async(text, temp_mp3, voice))

        audio = AudioSegment.from_mp3(temp_mp3)
        audio = audio.set_frame_rate(16000).set_channels(1)
        wav_filename = f"{filename_no_ext}.wav"
        audio.export(wav_filename, format="wav")

        os.remove(temp_mp3)
        logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {wav_filename}")
        return wav_filename
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ edge-tts –ø—Ä–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–∏ '{text}': {e}")
        return None


def text_to_speech(text: str, filename_no_ext: str, voice_profile: dict) -> Optional[str]:
    engine = voice_profile.get("engine", "gtts")
    params = voice_profile.get("params", {})
    if engine == "edge_tts":
        return tts_edge(text, filename_no_ext, voice=params.get("voice", "ru-RU-DmitryNeural"))
    # gTTS –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return tts_gtts(text, filename_no_ext, slow=bool(params.get("slow", False)))


def load_words_json(path: str) -> Dict[str, List[str]]:
    if not os.path.exists(path):
        raise FileNotFoundError(
            f"–§–∞–π–ª {path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ JSON –≤–∏–¥–∞: {{\"–∏–Ω—Ñ–∏–Ω–∏—Ç–∏–≤\": [\"–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ1\", \"–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ2\"]}}"
        )
    with open(path, 'r', encoding='utf-8') as f:
        data = json.load(f)
        if not isinstance(data, dict):
            raise ValueError("words.json –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º {—Å–ª–æ–≤–æ: [—Å–ø–∏—Å–æ–∫_–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π]}")
        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        normalized: Dict[str, List[str]] = {}
        for word, sentences in data.items():
            if not isinstance(word, str):
                logger.warning(f"–ü—Ä–æ–ø—É—Å–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ (–æ–∂–∏–¥–∞–ª–∞—Å—å —Å—Ç—Ä–æ–∫–∞): {word}")
                continue
            if not isinstance(sentences, list):
                logger.warning(f"–ü—Ä–æ–ø—É—Å–∫ '{word}': –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
                continue
            # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
            clean_sentences = []
            for s in sentences:
                if isinstance(s, str):
                    s2 = s.strip()
                    if s2:
                        clean_sentences.append(s2)
            if not clean_sentences:
                logger.warning(f"–î–ª—è —Å–ª–æ–≤–∞ '{word}' –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π ‚Äî –ø—Ä–æ–ø—É—Å–∫")
                continue
            normalized[word.strip()] = clean_sentences
        return normalized


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # 1) –û—á–∏—Å—Ç–∫–∞ dataset –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
    clean_dataset()

    # 2) –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    try:
        words_to_sentences = load_words_json(WORDS_JSON)
    except Exception as e:
        logger.error(str(e))
        return

    if not words_to_sentences:
        logger.warning("–í words.json –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è.")
        return

    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(words_to_sentences)} —Å–ª–æ–≤ –∏–∑ {WORDS_JSON}.")

    manifest_lines: List[str] = []
    total_files = 0

    for word, sentences in words_to_sentences.items():
        logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–≤–∞: {word}")

        for i, sentence in enumerate(sentences, start=1):
            profile = random.choice(VOICE_PROFILES)
            profile_name = profile.get("name", "voice")
            safe_word = word.replace('/', '_').replace('\\', '_')
            filename_no_ext = os.path.join(OUTPUT_DIR, f"{safe_word}_{i}_{profile_name}")

            wav_file = text_to_speech(sentence, filename_no_ext, profile)

            if wav_file:
                # –ü—É—Ç—å –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ manifest.csv
                manifest_dir = os.path.dirname(MANIFEST_FILE)
                relative_path = os.path.relpath(wav_file, start=manifest_dir).replace("\\", "/")
                manifest_lines.append(f"{relative_path},{sentence}")
                total_files += 1

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –∑–∞–¥–¥–æ—Å–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã TTS
            time.sleep(0.2)

    # –ó–∞–ø–∏—Å—å manifest.csv
    with open(MANIFEST_FILE, 'w', encoding='utf-8') as f:
        f.write("audio_path,text\n")  # –∑–∞–≥–æ–ª–æ–≤–æ–∫
        for line in manifest_lines:
            f.write(line + "\n")

    logger.info(f"üéâ –ì–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞–Ω–æ {total_files} –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤.")
    logger.info(f"üìÑ manifest.csv —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Å {len(manifest_lines)} –∑–∞–ø–∏—Å—è–º–∏.")


if __name__ == "__main__":
    main()
